563939b66d319b6e5afd6ce69551cbe1
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = exports.ProviderPropType = exports.Animated = exports.MAP_TYPES = void 0;var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");










var _MapMarker = _interopRequireDefault(require("./MapMarker"));
var _MapPolyline = _interopRequireDefault(require("./MapPolyline"));
var _MapPolygon = _interopRequireDefault(require("./MapPolygon"));
var _MapCircle = _interopRequireDefault(require("./MapCircle"));
var _MapCallout = _interopRequireDefault(require("./MapCallout"));
var _MapOverlay = _interopRequireDefault(require("./MapOverlay"));
var _MapUrlTile = _interopRequireDefault(require("./MapUrlTile"));
var _MapLocalTile = _interopRequireDefault(require("./MapLocalTile"));
var _AnimatedRegion = _interopRequireDefault(require("./AnimatedRegion"));
var _decorateMapComponent = require("./decorateMapComponent");





var ProviderConstants = _interopRequireWildcard(require("./ProviderConstants"));var _jsxFileName = "/Users/bisoyeatolagbe/projects/bisoye/LocationView/node_modules/react-native-maps/lib/components/MapView.js";function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance");}function _iterableToArray(iter) {if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var MAP_TYPES = {
  STANDARD: 'standard',
  SATELLITE: 'satellite',
  HYBRID: 'hybrid',
  TERRAIN: 'terrain',
  NONE: 'none',
  MUTEDSTANDARD: 'mutedStandard' };exports.MAP_TYPES = MAP_TYPES;


var GOOGLE_MAPS_ONLY_TYPES = [
MAP_TYPES.TERRAIN,
MAP_TYPES.NONE];


var viewConfig = {
  uiViewClassName: 'AIR<provider>Map',
  validAttributes: {
    region: true } };







var CameraShape = _propTypes.default.shape({
  center: _propTypes.default.shape({
    latitude: _propTypes.default.number.isRequired,
    longitude: _propTypes.default.number.isRequired }),

  pitch: _propTypes.default.number.isRequired,
  heading: _propTypes.default.number.isRequired,
  altitude: _propTypes.default.number.isRequired,
  zoom: _propTypes.default.number.isRequired });




var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

var propTypes = _objectSpread({},
viewPropTypes, {





  provider: _propTypes.default.oneOf([
  'google']),






  style: viewPropTypes.style,







  customMapStyle: _propTypes.default.array,






  customMapStyleString: _propTypes.default.string,











  showsUserLocation: _propTypes.default.bool,








  userLocationAnnotationTitle: _propTypes.default.string,







  showsMyLocationButton: _propTypes.default.bool,








  followsUserLocation: _propTypes.default.bool,






  showsPointsOfInterest: _propTypes.default.bool,







  showsCompass: _propTypes.default.bool,






  zoomEnabled: _propTypes.default.bool,







  zoomControlEnabled: _propTypes.default.bool,






  rotateEnabled: _propTypes.default.bool,






  cacheEnabled: _propTypes.default.bool,






  loadingEnabled: _propTypes.default.bool,






  loadingBackgroundColor: _reactNative.ColorPropType,






  loadingIndicatorColor: _reactNative.ColorPropType,






  scrollEnabled: _propTypes.default.bool,






  pitchEnabled: _propTypes.default.bool,







  toolbarEnabled: _propTypes.default.bool,







  moveOnMarkerPress: _propTypes.default.bool,






  showsScale: _propTypes.default.bool,





  showsBuildings: _propTypes.default.bool,





  showsTraffic: _propTypes.default.bool,







  showsIndoors: _propTypes.default.bool,







  showsIndoorLevelPicker: _propTypes.default.bool,










  mapType: _propTypes.default.oneOf(Object.values(MAP_TYPES)),







  region: _propTypes.default.shape({



    latitude: _propTypes.default.number.isRequired,
    longitude: _propTypes.default.number.isRequired,





    latitudeDelta: _propTypes.default.number.isRequired,
    longitudeDelta: _propTypes.default.number.isRequired }),










  initialRegion: _propTypes.default.shape({



    latitude: _propTypes.default.number.isRequired,
    longitude: _propTypes.default.number.isRequired,





    latitudeDelta: _propTypes.default.number.isRequired,
    longitudeDelta: _propTypes.default.number.isRequired }),








  camera: CameraShape,












  initialCamera: CameraShape,







  liteMode: _propTypes.default.bool,








  mapPadding: _reactNative.EdgeInsetsPropType,








  paddingAdjustmentBehavior: _propTypes.default.oneOf(['always', 'automatic', 'never']),






  maxDelta: _propTypes.default.number,






  minDelta: _propTypes.default.number,





  legalLabelInsets: _reactNative.EdgeInsetsPropType,




  onMapReady: _propTypes.default.func,




  onKmlReady: _propTypes.default.func,




  onRegionChange: _propTypes.default.func,




  onRegionChangeComplete: _propTypes.default.func,




  onPress: _propTypes.default.func,




  onLongPress: _propTypes.default.func,




  onUserLocationChange: _propTypes.default.func,




  onPanDrag: _propTypes.default.func,




  onPoiClick: _propTypes.default.func,




  onMarkerPress: _propTypes.default.func,







  onMarkerSelect: _propTypes.default.func,







  onMarkerDeselect: _propTypes.default.func,




  onCalloutPress: _propTypes.default.func,




  onMarkerDragStart: _propTypes.default.func,




  onMarkerDrag: _propTypes.default.func,





  onMarkerDragEnd: _propTypes.default.func,




  minZoomLevel: _propTypes.default.number,




  maxZoomLevel: _propTypes.default.number,




  kmlSrc: _propTypes.default.string,




  onIndoorLevelActivated: _propTypes.default.func,




  onIndoorBuildingFocused: _propTypes.default.func });var


MapView = function (_React$Component) {_inherits(MapView, _React$Component);
  function MapView(props) {var _this;_classCallCheck(this, MapView);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapView).call(this, props));

    _this.state = {
      isReady: _reactNative.Platform.OS === 'ios' };


    _this._onMapReady = _this._onMapReady.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this._onMarkerPress = _this._onMarkerPress.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this._onChange = _this._onChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this._onLayout = _this._onLayout.bind(_assertThisInitialized(_assertThisInitialized(_this)));return _this;
  }_createClass(MapView, [{ key: "getChildContext", value: function getChildContext()

    {
      return { provider: this.props.provider };
    } }, { key: "componentWillUpdate", value: function componentWillUpdate(

    nextProps) {
      var a = this.__lastRegion;
      var b = nextProps.region;
      if (!a || !b) return;
      if (
      a.latitude !== b.latitude ||
      a.longitude !== b.longitude ||
      a.latitudeDelta !== b.latitudeDelta ||
      a.longitudeDelta !== b.longitudeDelta)
      {
        this.map.setNativeProps({ region: b });
      }
    } }, { key: "componentDidMount", value: function componentDidMount()

    {var
      isReady = this.state.isReady;
      if (isReady) {
        this._updateStyle();
      }
    } }, { key: "_updateStyle", value: function _updateStyle()

    {var
      customMapStyle = this.props.customMapStyle;
      this.map.setNativeProps({ customMapStyleString: JSON.stringify(customMapStyle) });
    } }, { key: "_onMapReady", value: function _onMapReady()

    {var _this$props =
      this.props,region = _this$props.region,initialRegion = _this$props.initialRegion,onMapReady = _this$props.onMapReady;
      if (region) {
        this.map.setNativeProps({ region: region });
      } else if (initialRegion) {
        this.map.setNativeProps({ initialRegion: initialRegion });
      }
      this._updateStyle();
      this.setState({ isReady: true }, function () {
        if (onMapReady) onMapReady();
      });
    } }, { key: "_onLayout", value: function _onLayout(

    e) {var
      layout = e.nativeEvent.layout;
      if (!layout.width || !layout.height) return;
      if (this.state.isReady && !this.__layoutCalled) {var _this$props2 =
        this.props,region = _this$props2.region,initialRegion = _this$props2.initialRegion;
        if (region) {
          this.__layoutCalled = true;
          this.map.setNativeProps({ region: region });
        } else if (initialRegion) {
          this.__layoutCalled = true;
          this.map.setNativeProps({ initialRegion: initialRegion });
        }
      }
      if (this.props.onLayout) {
        this.props.onLayout(e);
      }
    } }, { key: "_onMarkerPress", value: function _onMarkerPress(

    event) {
      if (this.props.onMarkerPress) {
        this.props.onMarkerPress(event.nativeEvent);
      }
    } }, { key: "_onChange", value: function _onChange(

    event) {
      this.__lastRegion = event.nativeEvent.region;
      if (event.nativeEvent.continuous) {
        if (this.props.onRegionChange) {
          this.props.onRegionChange(event.nativeEvent.region);
        }
      } else if (this.props.onRegionChangeComplete) {
        this.props.onRegionChangeComplete(event.nativeEvent.region);
      }
    } }, { key: "getCamera", value: function getCamera()

    {
      if (_reactNative.Platform.OS === 'android') {
        return _reactNative.NativeModules.AirMapModule.getCamera(this._getHandle());
      } else if (_reactNative.Platform.OS === 'ios') {
        return this._runCommand('getCamera', []);
      }
      return Promise.reject('getCamera not supported on this platform');
    } }, { key: "setCamera", value: function setCamera(

    camera) {
      this._runCommand('setCamera', [camera]);
    } }, { key: "animateCamera", value: function animateCamera(

    camera, opts) {
      this._runCommand('animateCamera', [camera, opts && opts.duration || 500]);
    } }, { key: "animateToNavigation", value: function animateToNavigation(

    location, bearing, angle, duration) {
      console.warn('animateToNavigation() is deprecated, use animateCamera() instead');
      this._runCommand('animateToNavigation', [location, bearing, angle, duration || 500]);
    } }, { key: "animateToRegion", value: function animateToRegion(

    region, duration) {
      this._runCommand('animateToRegion', [region, duration || 500]);
    } }, { key: "animateToCoordinate", value: function animateToCoordinate(

    latLng, duration) {
      console.warn('animateToCoordinate() is deprecated, use animateCamera() instead');
      this._runCommand('animateToCoordinate', [latLng, duration || 500]);
    } }, { key: "animateToBearing", value: function animateToBearing(

    bearing, duration) {
      console.warn('animateToBearing() is deprecated, use animateCamera() instead');
      this._runCommand('animateToBearing', [bearing, duration || 500]);
    } }, { key: "animateToViewingAngle", value: function animateToViewingAngle(

    angle, duration) {
      console.warn('animateToViewingAngle() is deprecated, use animateCamera() instead');
      this._runCommand('animateToViewingAngle', [angle, duration || 500]);
    } }, { key: "fitToElements", value: function fitToElements(

    animated) {
      this._runCommand('fitToElements', [animated]);
    } }, { key: "fitToSuppliedMarkers", value: function fitToSuppliedMarkers(

    markers) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var _options$edgePadding =



      options.edgePadding,edgePadding = _options$edgePadding === void 0 ? { top: 0, right: 0, bottom: 0, left: 0 } : _options$edgePadding,_options$animated = options.animated,animated = _options$animated === void 0 ? true : _options$animated;

      this._runCommand('fitToSuppliedMarkers', [markers, edgePadding, animated]);
    } }, { key: "fitToCoordinates", value: function fitToCoordinates()

    {var coordinates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var _options$edgePadding2 =



      options.edgePadding,edgePadding = _options$edgePadding2 === void 0 ? { top: 0, right: 0, bottom: 0, left: 0 } : _options$edgePadding2,_options$animated2 = options.animated,animated = _options$animated2 === void 0 ? true : _options$animated2;

      this._runCommand('fitToCoordinates', [coordinates, edgePadding, animated]);
    } }, { key: "getMapBoundaries", value: function getMapBoundaries() {return regeneratorRuntime.async(function getMapBoundaries$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:if (!(







              _reactNative.Platform.OS === 'android')) {_context.next = 6;break;}_context.next = 3;return regeneratorRuntime.awrap(
              _reactNative.NativeModules.AirMapModule.getMapBoundaries(this._getHandle()));case 3:return _context.abrupt("return", _context.sent);case 6:if (!(
              _reactNative.Platform.OS === 'ios')) {_context.next = 10;break;}_context.next = 9;return regeneratorRuntime.awrap(
              this._runCommand('getMapBoundaries', []));case 9:return _context.abrupt("return", _context.sent);case 10:return _context.abrupt("return",

              Promise.reject('getMapBoundaries not supported on this platform'));case 11:case "end":return _context.stop();}}}, null, this);} }, { key: "setMapBoundaries", value: function setMapBoundaries(


    northEast, southWest) {
      this._runCommand('setMapBoundaries', [northEast, southWest]);
    } }, { key: "setIndoorActiveLevelIndex", value: function setIndoorActiveLevelIndex(

    activeLevelIndex) {
      this._runCommand('setIndoorActiveLevelIndex', [activeLevelIndex]);
    } }, { key: "takeSnapshot", value: function takeSnapshot(















    args) {var _this2 = this;



      if (_reactNative.Platform.OS === 'ios' && arguments.length === 4) {
        console.warn('Old takeSnapshot API has been deprecated; will be removed in the near future');
        var width = arguments[0];
        var height = arguments[1];
        var region = arguments[2];
        var callback = arguments[3];
        this._runCommand('takeSnapshot', [
        width || 0,
        height || 0,
        region || {},
        'png',
        1,
        'legacy',
        callback]);

        return undefined;
      }


      var config = {
        width: args.width || 0,
        height: args.height || 0,
        region: args.region || {},
        format: args.format || 'png',
        quality: args.quality || 1.0,
        result: args.result || 'file' };

      if (config.format !== 'png' &&
      config.format !== 'jpg') throw new Error('Invalid format specified');
      if (config.result !== 'file' &&
      config.result !== 'base64') throw new Error('Invalid result specified');


      if (_reactNative.Platform.OS === 'android') {
        return _reactNative.NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);
      } else if (_reactNative.Platform.OS === 'ios') {
        return new Promise(function (resolve, reject) {
          _this2._runCommand('takeSnapshot', [
          config.width,
          config.height,
          config.region,
          config.format,
          config.quality,
          config.result,
          function (err, snapshot) {
            if (err) {
              reject(err);
            } else {
              resolve(snapshot);
            }
          }]);

        });
      }
      return Promise.reject('takeSnapshot not supported on this platform');
    } }, { key: "pointForCoordinate", value: function pointForCoordinate(










    coordinate) {
      if (_reactNative.Platform.OS === 'android') {
        return _reactNative.NativeModules.AirMapModule.pointForCoordinate(this._getHandle(), coordinate);
      } else if (_reactNative.Platform.OS === 'ios') {
        return this._runCommand('pointForCoordinate', [coordinate]);
      }
      return Promise.reject('pointForCoordinate not supported on this platform');
    } }, { key: "coordinateForPoint", value: function coordinateForPoint(










    point) {
      if (_reactNative.Platform.OS === 'android') {
        return _reactNative.NativeModules.AirMapModule.coordinateForPoint(this._getHandle(), point);
      } else if (_reactNative.Platform.OS === 'ios') {
        return this._runCommand('coordinateForPoint', [point]);
      }
      return Promise.reject('coordinateForPoint not supported on this platform');
    } }, { key: "boundingBoxForRegion", value: function boundingBoxForRegion(








    region) {
      return {
        northEast: {
          latitude: region.latitude + region.latitudeDelta / 2,
          longitude: region.longitude + region.longitudeDelta / 2 },

        southWest: {
          latitude: region.latitude - region.latitudeDelta / 2,
          longitude: region.longitude - region.longitudeDelta / 2 } };


    } }, { key: "_uiManagerCommand", value: function _uiManagerCommand(

    name) {
      return _reactNative.NativeModules.UIManager[(0, _decorateMapComponent.getAirMapName)(this.props.provider)].Commands[name];
    } }, { key: "_mapManagerCommand", value: function _mapManagerCommand(

    name) {
      return _reactNative.NativeModules[(0, _decorateMapComponent.getAirMapName)(this.props.provider) + "Manager"][name];
    } }, { key: "_getHandle", value: function _getHandle()

    {
      return (0, _reactNative.findNodeHandle)(this.map);
    } }, { key: "_runCommand", value: function _runCommand(

    name, args) {
      switch (_reactNative.Platform.OS) {
        case 'android':
          return _reactNative.NativeModules.UIManager.dispatchViewManagerCommand(
          this._getHandle(),
          this._uiManagerCommand(name),
          args);


        case 'ios':
          return this._mapManagerCommand(name).apply(void 0, [this._getHandle()].concat(_toConsumableArray(args)));

        default:
          return Promise.reject("Invalid platform was passed: " + _reactNative.Platform.OS);}

    } }, { key: "render", value: function render()

    {var _this3 = this;
      var props;

      if (this.state.isReady) {
        props = _objectSpread({
          region: null,
          initialRegion: null,
          onMarkerPress: this._onMarkerPress,
          onChange: this._onChange,
          onMapReady: this._onMapReady,
          onLayout: this._onLayout },
        this.props);

        if (_reactNative.Platform.OS === 'ios' && props.provider === ProviderConstants.PROVIDER_DEFAULT &&
        GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)) {
          props.mapType = MAP_TYPES.standard;
        }
        props.handlePanDrag = !!props.onPanDrag;
      } else {
        props = {
          style: this.props.style,
          region: null,
          initialRegion: null,
          onMarkerPress: this._onMarkerPress,
          onChange: this._onChange,
          onMapReady: this._onMapReady,
          onLayout: this._onLayout };

      }

      if (_reactNative.Platform.OS === 'android' && this.props.liteMode) {
        return (
          _react.default.createElement(AIRMapLite, _extends({
            ref: function ref(_ref) {_this3.map = _ref;} },
          props, { __source: { fileName: _jsxFileName, lineNumber: 875 } })));


      }

      var AIRMap = getAirMapComponent(this.props.provider);

      return (
        _react.default.createElement(AIRMap, _extends({
          ref: function ref(_ref2) {_this3.map = _ref2;} },
        props, { __source: { fileName: _jsxFileName, lineNumber: 885 } })));


    } }]);return MapView;}(_react.default.Component);


MapView.propTypes = propTypes;
MapView.viewConfig = viewConfig;
MapView.childContextTypes = _decorateMapComponent.contextTypes;

MapView.MAP_TYPES = MAP_TYPES;

var nativeComponent = function nativeComponent(Component) {return (0, _reactNative.requireNativeComponent)(Component, MapView, {
    nativeOnly: {
      onChange: true,
      onMapReady: true,
      onKmlReady: true,
      handlePanDrag: true } });};


var airMaps = {
  default: nativeComponent('AIRMap') };

if (_reactNative.Platform.OS === 'android') {
  airMaps.google = airMaps.default;
} else {
  airMaps.google = _decorateMapComponent.googleMapIsInstalled ? nativeComponent('AIRGoogleMap') :
  (0, _decorateMapComponent.createNotSupportedComponent)('react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.');
}
var getAirMapComponent = function getAirMapComponent(provider) {return airMaps[provider || 'default'];};

var AIRMapLite = _reactNative.NativeModules.UIManager.AIRMapLite &&
(0, _reactNative.requireNativeComponent)('AIRMapLite', MapView, {
  nativeOnly: {
    onChange: true,
    onMapReady: true,
    handlePanDrag: true } });



var Animated = _reactNative.Animated.createAnimatedComponent(MapView);exports.Animated = Animated;

var ProviderPropType = _propTypes.default.oneOf(Object.values(ProviderConstants));exports.ProviderPropType = ProviderPropType;









MapView.Marker = _MapMarker.default;
MapView.Polyline = _MapPolyline.default;
MapView.Polygon = _MapPolygon.default;
MapView.Circle = _MapCircle.default;
MapView.UrlTile = _MapUrlTile.default;
MapView.LocalTile = _MapLocalTile.default;
MapView.Overlay = _MapOverlay.default;
MapView.Callout = _MapCallout.default;
_extends(MapView, ProviderConstants);
MapView.ProviderPropType = ProviderPropType;

MapView.Animated = Animated;
MapView.AnimatedRegion = _AnimatedRegion.default;var _default =

MapView;exports.default = _default;